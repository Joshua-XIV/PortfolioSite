[
  {
    "name": "Social Media Site",
    "images": ["postcomment.png", "searchresult.png", "avatar.png", "jobposthome.png", "jobpostfulldesc.png"],
    "desc": "Full-stack social media platform with real-time posts, comments, profiles, and secure authentication features.",
    "languages": ["React", "TypeScript", "JavaScript", "Node.js", "Docker", "AWS"],
    "longDesc": "This Social Media Site is a full-stack platform designed for users to create accounts, post updates, comment in real time, and interact with a modern social feed. The app features secure authentication (JWT, email verification, rate limiting), a dynamic feed with live updates via WebSockets, and user profiles with editable information and avatars.\n\nThe backend is built with Node.js and TypeScript, exposing 15+ REST API endpoints for posts, comments, and user management, all with robust error handling and logging. The frontend uses React and TypeScript for a responsive, single-page experience.\n\nI designed and implemented the authentication system, real-time comment updates, and the logging/monitoring pipeline. The app is containerized with Docker and deployed on AWS EC2, with automated log management and environment parity between development and production.\n\nThis project taught me how to architect scalable, secure web applications and manage real-time data flows in a production-like environment.",
    "source": "https://github.com/Joshua-XIV/SocialMediaSite"
  },
  {
    "name": "QuickRoom",
    "images": ["quickroomhome.jpg", "createroom.jpg", "browseroom.jpg"],
    "desc": "Real Time Collaborative Chat Room, featuring text, audio, and video chats. Rooms can set to be open to the public browser list for anyone to join.",
    "languages": ["React", "JavaScript", "Node.JS", "Express.JS", "TailwindCSS"],
    "longDesc": "QuickRoom is a real-time chat platform where users can create or join rooms for text, audio, and video conversations. Each room supports up to 20 users and can be public, private, or password-protected.\n\nThe app uses React for the frontend and Node.js/Express for the backend, with Socket.IO enabling instant messaging and presence detection. WebRTC is integrated for peer-to-peer audio and video calls, allowing seamless transitions between chat and media.\n\nI built the room management logic, implemented user authentication, and integrated WebRTC for live media. The system supports dynamic user lists, room codes for easy sharing, and real-time system alerts.\n\nThis project deepened my understanding of real-time web technologies and the challenges of synchronizing state across multiple users.",
    "source": "https://github.com/Joshua-XIV/QuickRoom"
  },
  {
    "name": "Dalamud Plugins",
    "images": ["dalamud.png", "plugins.png", "autoscrip.png", "autoscripconfig.png"],
    "desc": "Developed 3 plugins enhancing FFXIV's gameplay with quality-of-life features and task automation through game integration.",
    "languages": ["C#", ".NET", "GUI"],
    "longDesc": "I developed three plugins for the Final Fantasy XIV MMORPG using the Dalamud plugin framework (C#/.NET). These plugins automate repetitive in-game tasks, such as tracking FATE events, automating treasure map runs, and optimizing fishing for rare items.\n\nEach plugin hooks into game memory and events, providing real-time overlays and automation options through a custom GUI. I implemented asynchronous logic for event handling, memory reading, and user configuration.\n\nI also set up a CI/CD pipeline with GitHub Actions and PowerShell scripts to automate builds and releases, reducing manual work and ensuring users always have the latest features.\n\nThe plugins are used by over 100 players and have received community contributions for new features and bug fixes.",
    "source": "https://github.com/Joshua-XIV/MyDalamudPlugin"
  },
  {
    "name": "Weather App",
    "images": ["WeatherCityTemperatureView.png", "WeatherCityInfoView.png", "WeatherGridView.png", "WeatherAutoComplete.png", "WeatherDelete.png"],
    "desc": "Mobile Weather App that allows users to search multiple locations for real-time weather information",
    "languages": ["React", "React Native", "JavaScript", "Python", "FastAPI"],
    "longDesc": "This iOS weather app, built with SwiftUI and FastAPI, allows users to search for any city and view current conditions, hourly forecasts, and 10-day outlooks. The app features dynamic search with autocomplete, real-time weather updates, and a responsive UI that adapts to different weather conditions.\n\nI implemented a caching system to minimize API calls, integrated location services for quick access to local weather, and designed the UI for clarity and ease of use.\n\nThe backend, built with FastAPI, handles API key security and city search logic. This project helped me learn about mobile UI design, API integration, and performance optimization for mobile devices.",
    "source": "https://github.com/Joshua-XIV/SwiftWeatherApp"
  },
  {
    "name": "Portfolio",
    "images": ["portfolio.png"],
    "desc": "Portfolio to showcase my projects, knowledge of languages and frameworks, and fun information about myself.",
    "languages": ["React", "JavaScript", "TailwindCSS", "CSS", "HTML"],
    "longDesc": "My portfolio site is a single-page React application styled with TailwindCSS, designed to showcase my projects, skills, and background. It features animated sections, a responsive layout, and interactive project cards that link to detailed descriptions and source code.\n\nI built custom hooks for scroll-based animations, a dynamic project display sourced from a JSON file, and a modern navigation bar. The site is fully responsive and optimized for both desktop and mobile viewing.",
    "source": "https://github.com/Joshua-XIV/PortfolioSite"
  }
]
